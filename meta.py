from tflite_support.metadata_writers import image_classifier
from tflite_support.metadata_writers import metadata_info
from tflite_support.metadata_writers import writer_utils
from tflite_support import metadata_schema_py_generated as _metadata_fb

model_buffer = writer_utils.load_file("/Users/apple/Desktop/pyapi/assets/model_unquant.tflite")

_SAVE_TO_PATH = "/Users/apple/Desktop/model_unquant_metadata.tflite"

# Create general model information.
general_md = metadata_info.GeneralMd(
    name="NepaliNoteVisionNet",
    version="v1",
    description=("NepaliNoteVisionNet is a TensorFlow Lite model designed to empower blind and visually impaired individuals in Nepal. It provides real-time recognition of Nepali currency notes through audio and tactile feedback, enhancing accessibility and financial independence."),
    author="sRs",
    licenses="Apache License. Version 2.0")

# Create input tensor information.
input_md = metadata_info.InputImageTensorMd(
    name="input image",
    description=("Input image to be classified. The expected image is "
                 "128 x 128, with three channels (red, blue, and green) per "
                 "pixel. Each element in the tensor is a value between min and "
                 "max, where (per-channel) min is [0] and max is [255]."),
    norm_mean=[127.5],
    norm_std=[127.5],
    color_space_type=_metadata_fb.ColorSpaceType.RGB,
    tensor_type=writer_utils.get_input_tensor_types(model_buffer)[0])

# Create output tensor information.
output_md = metadata_info.ClassificationTensorMd(
    name="probability",
    description="Probabilities of the 07 labels respectively.",
    label_files=[
        metadata_info.LabelFileMd(file_path="/Users/apple/Desktop/pyapi/assets/labels.txt",
                                  locale="en")
    ],
    tensor_type=writer_utils.get_output_tensor_types(model_buffer)[0])


ImageClassifierWriter = image_classifier.MetadataWriter
# Create the metadata writer.
writer = ImageClassifierWriter.create_from_metadata_info(
    model_buffer, general_md, input_md, output_md)

# Verify the metadata generated by metadata writer.
print(writer.get_metadata_json())

# Populate the metadata into the model.
writer_utils.save_file(writer.populate(), _SAVE_TO_PATH)